<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\NodeType;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_help().
 */
function competencies_file_help($route_name, RouteMatchInterface $route_match){
  switch ($route_name) {
    case 'help.page.competencies_file':
      $output = '';
      $output .= '<h3>'.t('About').'</h3>';
      $output .= '<p>'.t('Please send help').'</p>';

      return $output;
  }
}


function competencies_file_user_insert($entity){
	// On créé certaines variables de config
	// (cf. competencies_file.config.yml)
	$config = \Drupal::config('competencies_file.config')->get('hook_entity_type_insert');
  $role = $config['role'];
  $contentType = $config['content_type'];
  $jobTitle = $config['job_title'];
  $contentTitle = $config['content_title'];
  $userId = $entity->id();

	// On vérifie que l'utilisateur possède bien le rôle drupalien
	if (in_array($role, $entity->getRoles())) {

		// On vérifie que le type de contenu "Dossier de compétences" existe bien
		if (NodeType::load($contentType)  != null) {

			// En premier, on créé les contenus Paragraphs,
			// qui seront ensuite liés au contenu Dossier de compétences.
			// Et on retourne la valeur à insérer dans le contenu
			$paraFormattedValue = createParagraph($userId);

			// Puis on créé le contenu Dossier de compétences
      $node = Node::create([
      	'type'=> $contentType,
      	'title' => $contentTitle,
      	'uid' => $userId,
      	'field_competencies_file_jobtitle' => $jobTitle,
      	'field_competencies_file_skill' => $paraFormattedValue
      ]);
    	$node->save();
		}
	}
}


function createParagraph($userId){

	$config = \Drupal::config('competencies_file.config');
	$paraFieldName = $config->get('hook_entity_type_insert.paragraph_type');
	$configParas = $config->get($paraFieldName);
	$paraFormattedValue = [];

	foreach ($configParas as $configPara) {

	  $paragraph = Paragraph::create([
	      'type' => $paraFieldName,
	      'uid' => [
	          'target_id' => $userId
	      ],
	      'field_skill_section' => [
	          'value' => $configPara['skill_section']
	      ],
	      'field_skill_competences' => [
	          'value' => $configPara['skill_competences']
	      ],
	  ]);
	  $paragraph->save();

	  $paraFormattedValue[] = array(
      'target_id' => $paragraph->id(),
      'target_revision_id' => $paragraph->getRevisionId(),
	  );
	}

	return $paraFormattedValue;
}

function competencies_file_theme_suggestions_alter(array &$suggestions, array $variables, $hook){
  // Add Templates Suggestions for competencies file field
  // of type entity reference revisions
  if ( $hook == "field" && isset($variables['element']) ) {
    $element = $variables['element'];
    if ($element['#field_type'] == "entity_reference_revisions" && $element['#bundle'] == 'competencies_file') {
      // Example : 'field--node--comptencies_file--field--ptype'
      $suggestions[] = $hook.'__'.$element['#entity_type'].'__'.$element['#bundle'].'__'.$hook.'__'.'ptype';
    }
  }

}


function competencies_file_theme($existing, $type, $theme, $path){

    return array(
        'node__competencies_file' => array(
            'template' => 'node--competencies-file',
            'base hook' => 'node',
            'variables' => array(
              'path_logo' => '/'.$path.'/assets/img/logo_ausy.png'
            )
        ),
        'paragraph__ptype_experience_pro' => array(
            'template' => 'paragraph--ptype-experience-pro',
            'base hook' => 'node'
        ),
        'paragraph__ptype_formation_diplome' => array(
            'template' => 'paragraph--ptype-formation-diplome',
            'base hook' => 'node'
        ),
        'field__node__competencies_file__field__ptype' => array(
            'template' => 'field--node--competencies-file--field--ptype',
            //'base hook' => 'node'
            'base hook' => 'field'
        )
    );
}



function competencies_file_preprocess_node(&$variables){

  $contentType  = $variables['node']->getType();
  $nodeTitle    = $variables['node']->getTitle();
  $routeName    = \Drupal::routeMatch()->getRouteName();

  if ( $contentType == 'competencies_file' && $routeName == 'entity.node.canonical' ) {
    $limiter = ' - ';
    $parts = explode($limiter,$nodeTitle);

    $variables['new_element']['field_competencies_file_dc'] = array(
      '#type' => 'html_tag',
      '#tag' => 'h1',
      '#value' => array_shift($parts),
      '#attributes' => array(
        'id' => 'print_dc'
      )
    );

    $variables['new_element']['field_competencies_file_consultant_identity'] = array(
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#value' => implode($limiter, $parts),
      '#attributes' => array(
        'id' => 'print_identity'
      )
    );

  }

}

function competencies_file_page_attachments(array &$page){

  $routeName    = \Drupal::routeMatch()->getRouteName();

  if ($routeName == 'entity.user.canonical') {
    $page['#attached']['library'][] = 'competencies_file/user-account';
  }

}
