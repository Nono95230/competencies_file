<?php

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function competencies_file_help($route_name, RouteMatchInterface $route_match){
  switch ($route_name) {
    case 'help.page.competencies_file':
      $output = '';
      $output .= '<h3>'.t('About').'</h3>';
      $output .= '<p>'.t('Please send help').'</p>';

      return $output;
  }
}



/*
function hook_ENTITY_TYPE_create()
Acts when creating a new entity of a specific type.
This hook runs after a new entity object has just been instantiated.

https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Entity%21entity.api.php/function/hook_entity_create/8.2.x
*/

/*
function hook_ENTITY_TYPE_insert
Respond to creation of a new entity of a particular type.
This hook runs once the entity has been stored. Note that hook implementations may not alter the stored entity data.

https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Entity%21entity.api.php/function/hook_ENTITY_TYPE_insert/8.2.x
*/

use Drupal\node\Entity\NodeType;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;

function competencies_file_user_insert($entity){
	// On créé certaines variables de config
	// (cf. competencies_file.config.yml)
	$config = \Drupal::config('competencies_file.config')->get('hook_entity_type_insert');
  $role = $config['role'];
  $contentType = $config['content_type'];
  $jobTitle = $config['job_title'];
  $contentTitle = $config['content_title'];
  $userId = $entity->id();

	// On vérifie que l'utilisateur possède bien le rôle drupalien
	if (in_array($role, $entity->getRoles())) {

		// On vérifie que le type de contenu "Dossier de compétences" existe bien
		if (NodeType::load($contentType)  != null) {

			// En premier, on créé les contenus Paragraphs,
			// qui seront ensuite liés au contenu Dossier de compétences.
			// Et on retourne la valeur à insérer dans le contenu
			$paraFormattedValue = createParagraph($userId);

			// Puis on créé le contenu Dossier de compétences
      $node = Node::create([
      	'type'=> $contentType,
      	'title' => $contentTitle,
      	'uid' => $userId,
      	'field_competencies_file_jobtitle' => $jobTitle,
      	'field_competencies_file_skill' => $paraFormattedValue
      ]);
    	$node->save();
		}
	}
}

function createParagraph($userId){

	$config = \Drupal::config('competencies_file.config');
	$paraFieldName = $config->get('hook_entity_type_insert.paragraph_type');
	$configParas = $config->get($paraFieldName);
	$paraFormattedValue = [];

	foreach ($configParas as $configPara) {

	  $paragraph = Paragraph::create([
	      'type' => $paraFieldName,
	      'uid' => [
	          'target_id' => $userId
	      ],
	      'field_skill_section' => [
	          'value' => $configPara['skill_section']
	      ],
	      'field_skill_competences' => [
	          'value' => $configPara['skill_competences']
	      ],
	  ]);
	  $paragraph->save();

	  $paraFormattedValue[] = array(
      'target_id' => $paragraph->id(),
      'target_revision_id' => $paragraph->getRevisionId(),
	  );
	}

	return $paraFormattedValue;
}



// Utile pour afficher les valeurs de certains champs d'un contenu déjà créer
// S'utilise sur la page d'un noeud en particulier
function competencies_file_node_load(array $entities/*, $entity_type_id*/){


  $configViews      = \Drupal::config('competencies_file.config')->get('hook_install.views');
  $themeMachineName = \Drupal::service('theme.manager')->getActiveTheme()->getName();

  // On parcourt le tableau des vues à placer dans des blocs
  foreach ($configViews as $key => $configView) {

    // On récupère les variables nécessaire au placement du bloc pour la vue en cours
    $blockRegion  = $configView['block_region'];
    $viewType     = $configView['view_Type'];
    $viewId       = $configView['view_Id'];
    $viewDisplay  = $configView['view_Display'];

    // On récupère les variables de visibilité du bloc pour la vue en cours
    $configVisibility = $configView['visibility'];

    // On récupère les variables de visibilité
    // liées aux rôles pour la vue en cours
    $getRoles       = $configVisibility['roles'];
    $rolesList      = array();
    $getRolesNegate = $configVisibility['roles_negate'];

    // S'il existe une visibilité liée aux roles,
    // Alors on initialise une variable listant les rôles
    if (isset($getRoles)) {
      foreach ($getRoles as $role) {
        $rolesList[] = $role['name'];
      }
    }

    // On récupère les variables de visibilité
    // liées aux pages pour la vue en cours
    $getPages       = $configVisibility['pages'];
    $pagesList      = array();
    $getPagesNegate = $configVisibility['pages_negate'];

    // S'il existe une visibilité liée aux pages,
    // Alors on initialise une variable listant les pages
    if (isset($getPages)) {
      foreach ($getPages as $page) {
        $rolesList[] = $page['url'];
      }
    }

    // On récupère les variables de visibilité
    // liées aux types de contenu pour la vue en cours
    $getContentTypes        = $configVisibility['content_types'];
    $contentTypesList       = array();
    $getContentTypesNegate  = $configVisibility['content_types_negate'];

    // S'il existe une visibilité liée aux types de contenu,
    // Alors on initialise une variable listant les types de contenu
    if (isset($getContentTypes)) {
      foreach ($getContentTypes as $contentType) {
        $contentTypesList[] = $contentType['name'];
      }
    }



    // // On récupère un tableau des vues activées
    // $enabledView = \Drupal\views\Views::getEnabledViews();
    // // On vérifie que l'id de la vue qu'on souhaite utiliser
    // // fait bien partie d'une vue activée
    // if (array_key_exists( $viewId, $enabledView)) {
    //   // On récupère un tableau des affichages disponibles pour la vue en cours
    //   $getViewDisplays = \Drupal\views\Views::getEnabledViews()[$viewId]->get('display');
    //   // On vérifie que l'affichage souhaité existe bien dans la vue en cours
    //   if (array_key_exists($viewDisplay, $getViewDisplays)) {

    //   }
    // }




    $blockValues = array(
      // A unique ID for the block instance.
      'id' => 'views_block__view_block_competencies_file_block_1',
      // The plugin block id as defined in the class.
      'plugin' => 'views_block:view_block_competencies_file-block_1',
      'status' => 'true',
      'settings' => array(
        'id' =>'views_block:view_block_competencies_file-block_1',
        'label' => '',
        'provider' => 'views',
        'label_display' => 'visible',
        'views_label' => '',
        'items_per_page' => 'none',
        'context_mapping' => array(),
      ),
      // The machine name of the theme region.
      'region' => 'content',
      // The machine name of the theme.
      'theme' => 'bootstrap_child',
      'weight' => 0,
      'visibility' => array(
        'request_path' => array(
          'id' => 'request_path',
          'pages' => '/user/*',
          'negate' => false,
          'context_mapping' => array(),
        ),
        'user_role' => array(
          'id' => 'user_role',
          'roles'=> array(
            'drupalien' => 'drupalien',
          ),
          'negate' => false,
          'context_mapping' => array(
            'user' => '@user.current_user_context:current_user'
          ),
        ),
      ),
    );

    //$block = \Drupal\block\Entity\Block::create($blockValues);
    //$block->save();


  }


 //  $field = $entities[1]->get('field_competencies_file_skill')->getValue();
 //  $ids = [];
 //  foreach ($field as $d){
 //      $ids[] = $d['target_id'];
 //  }

	// $paras = Paragraph::loadMultiple($ids);
	// foreach ($paras as $para) {
	// 	kint($para->get('id')->getValue());
	// 	kint($para->get('field_skill_section')->getValue());
	// 	kint($para->get('field_skill_competences')->getValue());
	// 	kint($para->get('uid')->getValue());
	// }

	// die();


}
